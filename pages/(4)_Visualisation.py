import streamlit as st
import pandas as pd
st.set_page_config(page_title='Synthetic Data Web App',layout='wide')

with st.spinner("Loading visualisation libraries, please wait..."):
    import matplotlib.pyplot as plt
    import seaborn as sns

# Loads datasets and models from session state and updates sidebar
datasets=st.session_state['datasets'] if 'datasets' in st.session_state else {}
single_metadata=st.session_state['single_metadata'] if 'single_metadata' in st.session_state else {}
multi_metadata=st.session_state['multi_metadata'] if 'multi_metadata' in st.session_state else {}
single_models=st.session_state['single_models'] if 'single_models' in st.session_state else {}
multi_models=st.session_state['multi_models'] if 'multi_models' in st.session_state else {}
single_synthetic=st.session_state['single_synthetic'] if 'single_synthetic' in st.session_state else {}
multi_synthetic=st.session_state['multi_synthetic'] if 'multi_synthetic' in st.session_state else {}
with st.sidebar:
    "***Need help?***  *See [documentation](https://github.com/seahzs/syndataweb/) on Github.*"
    with st.expander("Tables"):
        for dataset in datasets:
            f"- {dataset}"
    with st.expander("Grouped Tables"):
        if multi_metadata:
            for dataset in multi_metadata['datasets']:
                f"- {dataset}"
    with st.expander("Fitted Single Tables"):
        for dataset_models in single_models:
            f"{dataset_models}:"
            for model in single_models[dataset_models]:
                f"- {model}"
    with st.expander("Fitted Multiple Tables"):
        for model in multi_models:
            f"- {model}"
    with st.expander("Generated Single Table"):
        for syn_dataset in single_synthetic:
            f"{syn_dataset}:"
            for model in single_synthetic[syn_dataset]:
                f"- {model}"
    with st.expander("Generated Multiple Tables"):
        for model in multi_synthetic:
            f"{model}"
            for dataset in multi_synthetic[model]:
                f"- {dataset}"

#Main Content
"### Visualisation"
if datasets=={}:
    st.error('Please load tables to continue.')
else:
    col1, col2 = st.columns([1,3])
    with col1:
        sel_vis = st.radio("Select visualisation:", ("Distribution", "Correlation"))
        sel_ds = st.radio("Select table:", options=datasets.keys())
        if sel_ds:
            dataset=datasets[sel_ds]
            if sel_vis=="Distribution":
                sel_feature = st.selectbox('Select column:',sorted(dataset.columns))
            elif sel_vis=="Correlation":
                sel_x = st.selectbox('Select column',sorted(dataset.columns))
                sel_y = st.selectbox('Select column (group by):',sorted(dataset.columns))
        "---"
        "Comparison with generated data:"
        syn_dataset=pd.DataFrame()
        sel_syn = st.radio("Select type:",("Single table","Multiple tables"))
        if sel_syn=="Single table":
            if sel_ds in single_synthetic:
                sel_ml = st.radio(f"Select fitted model:", options=single_synthetic[sel_ds].keys())
                syn_dataset=single_synthetic[sel_ds][sel_ml]
            else:
                st.info("**Hint:** Please fit model and generate data to make a comparison.")
        elif sel_syn=="Multiple tables":
            sel_ml = st.radio(f"Select fitted model:", options=multi_synthetic.keys())
            if sel_ml and sel_ds in multi_synthetic[sel_ml]:
                syn_dataset=multi_synthetic[sel_ml][sel_ds]
            else:
                st.info("**Hint:** Please fit model and generate data to make a comparison.")
    with col2:
        if sel_vis=="Distribution":
            f"**{sel_ds}** *(Original: {dataset.shape[0]} records)* - Distribution of '{sel_feature}'"
            with st.spinner('Loading chart, please wait...'):
                plot=sns.displot(dataset.sort_values([sel_feature]), x=sel_feature, stat="percent", common_norm=False, multiple="dodge", aspect=2.5, shrink=.9)
                plot.set(title=f"Distribution of '{sel_feature}'", ylabel="Percentage (%)")
                plt.xticks(rotation=270)
                st.pyplot(plot)
        elif sel_vis=="Correlation":
            f"**{sel_ds}** *(Original: {dataset.shape[0]} records)* - Distribution of '{sel_x}' grouped by '{sel_y}'"
            with st.spinner('Loading chart, please wait...'):
                plot=sns.displot(dataset.sort_values([sel_x]), x=sel_x, hue=sel_y, stat="percent", common_norm=False, multiple="dodge", aspect=2.5, shrink=.8)
                plot.set(title=f"Distribution of '{sel_y}' vs '{sel_x}'")
                plt.xticks(rotation=270)
                st.pyplot(plot)
        if syn_dataset.shape!=(0,0):
            if sel_vis=="Distribution":
                f"**{sel_ds}** *(Generated by '{sel_ml}': {syn_dataset.shape[0]} records)* - Distribution of '{sel_feature}'"
                with st.spinner('Loading chart, please wait...'):
                    plot=sns.displot(syn_dataset.sort_values([sel_feature]), x=sel_feature, stat="percent", common_norm=False, multiple="dodge", aspect=2.5, shrink=.8)
                    plot.set(title=f"Distribution of '{sel_feature}'", ylabel="Percentage (%)")
                    plt.xticks(rotation=270)
                    st.pyplot(plot)
            elif sel_vis=="Correlation":
                f"**{sel_ds}** *(Generated by '{sel_ml}': {syn_dataset.shape[0]} records)* - Distribution of '{sel_x}' grouped by '{sel_y}'"
                with st.spinner('Loading chart, please wait...'):
                    plot=sns.displot(syn_dataset.sort_values([sel_x]), x=sel_x, hue=sel_y, stat="percent", common_norm=False, multiple="dodge", aspect=2.5, shrink=.8)
                    plot.set(title=f"Distribution of '{sel_y}' vs '{sel_x}'")
                    plt.xticks(rotation=270)
                    st.pyplot(plot)


        